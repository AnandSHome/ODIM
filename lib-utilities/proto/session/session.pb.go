// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session/session.proto

package session

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SessionCreateRequest struct {
	RequestBody          []byte   `protobuf:"bytes,1,opt,name=RequestBody,proto3" json:"RequestBody,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionCreateRequest) Reset()         { *m = SessionCreateRequest{} }
func (m *SessionCreateRequest) String() string { return proto.CompactTextString(m) }
func (*SessionCreateRequest) ProtoMessage()    {}
func (*SessionCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c811121f5946b, []int{0}
}

func (m *SessionCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionCreateRequest.Unmarshal(m, b)
}
func (m *SessionCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionCreateRequest.Marshal(b, m, deterministic)
}
func (m *SessionCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCreateRequest.Merge(m, src)
}
func (m *SessionCreateRequest) XXX_Size() int {
	return xxx_messageInfo_SessionCreateRequest.Size(m)
}
func (m *SessionCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCreateRequest proto.InternalMessageInfo

func (m *SessionCreateRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type SessionUserName struct {
	UserName             string   `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionUserName) Reset()         { *m = SessionUserName{} }
func (m *SessionUserName) String() string { return proto.CompactTextString(m) }
func (*SessionUserName) ProtoMessage()    {}
func (*SessionUserName) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c811121f5946b, []int{1}
}

func (m *SessionUserName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionUserName.Unmarshal(m, b)
}
func (m *SessionUserName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionUserName.Marshal(b, m, deterministic)
}
func (m *SessionUserName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionUserName.Merge(m, src)
}
func (m *SessionUserName) XXX_Size() int {
	return xxx_messageInfo_SessionUserName.Size(m)
}
func (m *SessionUserName) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionUserName.DiscardUnknown(m)
}

var xxx_messageInfo_SessionUserName proto.InternalMessageInfo

func (m *SessionUserName) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type SessionUsersRoleID struct {
	RoleID               string   `protobuf:"bytes,1,opt,name=roleID,proto3" json:"roleID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionUsersRoleID) Reset()         { *m = SessionUsersRoleID{} }
func (m *SessionUsersRoleID) String() string { return proto.CompactTextString(m) }
func (*SessionUsersRoleID) ProtoMessage()    {}
func (*SessionUsersRoleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c811121f5946b, []int{2}
}

func (m *SessionUsersRoleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionUsersRoleID.Unmarshal(m, b)
}
func (m *SessionUsersRoleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionUsersRoleID.Marshal(b, m, deterministic)
}
func (m *SessionUsersRoleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionUsersRoleID.Merge(m, src)
}
func (m *SessionUsersRoleID) XXX_Size() int {
	return xxx_messageInfo_SessionUsersRoleID.Size(m)
}
func (m *SessionUsersRoleID) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionUsersRoleID.DiscardUnknown(m)
}

var xxx_messageInfo_SessionUsersRoleID proto.InternalMessageInfo

func (m *SessionUsersRoleID) GetRoleID() string {
	if m != nil {
		return m.RoleID
	}
	return ""
}

type SessionCreateResponse struct {
	StatusCode           int32             `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusMessage        string            `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	SessionId            string            `protobuf:"bytes,3,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Header               map[string]string `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SessionCreateResponse) Reset()         { *m = SessionCreateResponse{} }
func (m *SessionCreateResponse) String() string { return proto.CompactTextString(m) }
func (*SessionCreateResponse) ProtoMessage()    {}
func (*SessionCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c811121f5946b, []int{3}
}

func (m *SessionCreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionCreateResponse.Unmarshal(m, b)
}
func (m *SessionCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionCreateResponse.Marshal(b, m, deterministic)
}
func (m *SessionCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionCreateResponse.Merge(m, src)
}
func (m *SessionCreateResponse) XXX_Size() int {
	return xxx_messageInfo_SessionCreateResponse.Size(m)
}
func (m *SessionCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionCreateResponse proto.InternalMessageInfo

func (m *SessionCreateResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SessionCreateResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *SessionCreateResponse) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionCreateResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *SessionCreateResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

type SessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	SessionToken         string   `protobuf:"bytes,2,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionRequest) Reset()         { *m = SessionRequest{} }
func (m *SessionRequest) String() string { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()    {}
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c811121f5946b, []int{4}
}

func (m *SessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionRequest.Unmarshal(m, b)
}
func (m *SessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionRequest.Marshal(b, m, deterministic)
}
func (m *SessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequest.Merge(m, src)
}
func (m *SessionRequest) XXX_Size() int {
	return xxx_messageInfo_SessionRequest.Size(m)
}
func (m *SessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequest proto.InternalMessageInfo

func (m *SessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SessionRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type SessionResponse struct {
	StatusCode           int32             `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusMessage        string            `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Header               map[string]string `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SessionResponse) Reset()         { *m = SessionResponse{} }
func (m *SessionResponse) String() string { return proto.CompactTextString(m) }
func (*SessionResponse) ProtoMessage()    {}
func (*SessionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e18c811121f5946b, []int{5}
}

func (m *SessionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionResponse.Unmarshal(m, b)
}
func (m *SessionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionResponse.Marshal(b, m, deterministic)
}
func (m *SessionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionResponse.Merge(m, src)
}
func (m *SessionResponse) XXX_Size() int {
	return xxx_messageInfo_SessionResponse.Size(m)
}
func (m *SessionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionResponse proto.InternalMessageInfo

func (m *SessionResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SessionResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *SessionResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SessionResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionCreateRequest)(nil), "SessionCreateRequest")
	proto.RegisterType((*SessionUserName)(nil), "SessionUserName")
	proto.RegisterType((*SessionUsersRoleID)(nil), "SessionUsersRoleID")
	proto.RegisterType((*SessionCreateResponse)(nil), "SessionCreateResponse")
	proto.RegisterMapType((map[string]string)(nil), "SessionCreateResponse.HeaderEntry")
	proto.RegisterType((*SessionRequest)(nil), "SessionRequest")
	proto.RegisterType((*SessionResponse)(nil), "SessionResponse")
	proto.RegisterMapType((map[string]string)(nil), "SessionResponse.HeaderEntry")
}

func init() { proto.RegisterFile("session/session.proto", fileDescriptor_e18c811121f5946b) }

var fileDescriptor_e18c811121f5946b = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xb6, 0xe3, 0x26, 0xd0, 0x49, 0x43, 0xcb, 0x90, 0x54, 0x96, 0x55, 0xa1, 0x68, 0xc5, 0xa1,
	0x07, 0x30, 0xa2, 0xf4, 0x90, 0x16, 0x09, 0x51, 0x5a, 0x14, 0x72, 0x80, 0x83, 0x03, 0x0f, 0xe0,
	0xc4, 0x23, 0x88, 0x62, 0xbc, 0xc1, 0xbb, 0x8e, 0x94, 0x17, 0xe0, 0x51, 0x78, 0x2a, 0x1e, 0x06,
	0x65, 0xbd, 0xfe, 0x8d, 0x91, 0x82, 0xe0, 0x94, 0x99, 0x4f, 0xf3, 0xcd, 0x37, 0xf3, 0x4d, 0xd6,
	0x30, 0x10, 0x24, 0xc4, 0x82, 0x47, 0xcf, 0xf5, 0xaf, 0xbb, 0x8a, 0xb9, 0xe4, 0x6c, 0x04, 0xfd,
	0x69, 0x0a, 0xdc, 0xc6, 0xe4, 0x4b, 0xf2, 0xe8, 0x7b, 0x42, 0x42, 0xe2, 0x10, 0xba, 0x3a, 0x7c,
	0xcb, 0x83, 0x8d, 0x6d, 0x0e, 0xcd, 0xf3, 0x23, 0xaf, 0x0c, 0xb1, 0x67, 0x70, 0xac, 0x99, 0x9f,
	0x05, 0xc5, 0x1f, 0xfd, 0x6f, 0x84, 0x0e, 0xdc, 0x4f, 0x74, 0xac, 0x18, 0x87, 0x5e, 0x9e, 0xb3,
	0xa7, 0x80, 0xa5, 0x72, 0xe1, 0xf1, 0x90, 0x26, 0x77, 0x78, 0x0a, 0x9d, 0x58, 0x45, 0xba, 0x5e,
	0x67, 0xec, 0x47, 0x0b, 0x06, 0xb5, 0xb9, 0xc4, 0x8a, 0x47, 0x82, 0xf0, 0x31, 0x80, 0x90, 0xbe,
	0x4c, 0xc4, 0x2d, 0x0f, 0x52, 0x95, 0xb6, 0x57, 0x42, 0xf0, 0x09, 0xf4, 0xd2, 0xec, 0x03, 0x09,
	0xe1, 0x7f, 0x21, 0xbb, 0xa5, 0x1a, 0x57, 0x41, 0x3c, 0x83, 0x43, 0xed, 0xc3, 0x24, 0xb0, 0x2d,
	0x55, 0x51, 0x00, 0x88, 0x70, 0x30, 0xdb, 0x6e, 0x7d, 0xa0, 0xb6, 0x56, 0x31, 0x5e, 0x43, 0xe7,
	0x2b, 0xf9, 0x01, 0xc5, 0x76, 0x7b, 0x68, 0x9d, 0x77, 0x2f, 0x98, 0xdb, 0x38, 0x9f, 0xfb, 0x5e,
	0x15, 0xbd, 0x8b, 0x64, 0xbc, 0xf1, 0x34, 0xc3, 0xb9, 0x82, 0x6e, 0x09, 0xc6, 0x13, 0xb0, 0x96,
	0xb4, 0xd1, 0x1b, 0x6f, 0x43, 0xec, 0x43, 0x7b, 0xed, 0x87, 0x49, 0x36, 0x6c, 0x9a, 0x5c, 0xb7,
	0x46, 0x26, 0xf3, 0xe0, 0x81, 0xd6, 0xc9, 0x2e, 0x53, 0x19, 0xdd, 0xac, 0x8f, 0xce, 0xe0, 0x48,
	0x27, 0x9f, 0xf8, 0x92, 0x22, 0xdd, 0xb0, 0x82, 0xb1, 0x5f, 0x66, 0x7e, 0xba, 0xff, 0x6c, 0xeb,
	0x65, 0x6e, 0x92, 0xa5, 0x4c, 0x3a, 0x73, 0x6b, 0x3a, 0x4d, 0xf6, 0x34, 0xd9, 0xfd, 0x0f, 0x96,
	0x5d, 0xfc, 0xb4, 0xe0, 0x9e, 0x96, 0xc5, 0x37, 0xd0, 0x4b, 0xef, 0x93, 0x01, 0x03, 0xb7, 0xe9,
	0xef, 0xee, 0x9c, 0x36, 0x5f, 0x93, 0x19, 0x78, 0x09, 0xbd, 0x3b, 0x0a, 0xa9, 0xe8, 0x70, 0xec,
	0x56, 0x0f, 0xe2, 0x9c, 0xd4, 0x97, 0x64, 0x06, 0xbe, 0x82, 0xfe, 0x98, 0xe4, 0x4d, 0x18, 0xde,
	0xcc, 0xe5, 0x62, 0x9d, 0x71, 0xc5, 0x7e, 0xe4, 0x17, 0x00, 0x63, 0x92, 0x7f, 0xa5, 0x77, 0x05,
	0x58, 0x50, 0xf2, 0xf7, 0xf8, 0x67, 0x6a, 0x56, 0xc2, 0x0c, 0x1c, 0xc1, 0xc3, 0x82, 0x3a, 0xa5,
	0x78, 0xbd, 0x98, 0xd3, 0x7e, 0xa2, 0xaf, 0xd5, 0x92, 0xa5, 0x8e, 0xfa, 0x51, 0xef, 0x90, 0x1f,
	0xb9, 0xbb, 0x4f, 0x9f, 0x19, 0xb3, 0x8e, 0xfa, 0x04, 0xbd, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x90, 0xc2, 0x87, 0x23, 0x9b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionClient interface {
	CreateSession(ctx context.Context, in *SessionCreateRequest, opts ...grpc.CallOption) (*SessionCreateResponse, error)
	DeleteSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	GetAllActiveSessions(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	GetSessionUserName(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionUserName, error)
	GetSessionService(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error)
	GetSessionUserRoleID(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionUsersRoleID, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) CreateSession(ctx context.Context, in *SessionCreateRequest, opts ...grpc.CallOption) (*SessionCreateResponse, error) {
	out := new(SessionCreateResponse)
	err := c.cc.Invoke(ctx, "/Session/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) DeleteSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/Session/DeleteSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetAllActiveSessions(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/Session/GetAllActiveSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/Session/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetSessionUserName(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionUserName, error) {
	out := new(SessionUserName)
	err := c.cc.Invoke(ctx, "/Session/GetSessionUserName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetSessionService(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionResponse, error) {
	out := new(SessionResponse)
	err := c.cc.Invoke(ctx, "/Session/GetSessionService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) GetSessionUserRoleID(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionUsersRoleID, error) {
	out := new(SessionUsersRoleID)
	err := c.cc.Invoke(ctx, "/Session/GetSessionUserRoleID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
type SessionServer interface {
	CreateSession(context.Context, *SessionCreateRequest) (*SessionCreateResponse, error)
	DeleteSession(context.Context, *SessionRequest) (*SessionResponse, error)
	GetAllActiveSessions(context.Context, *SessionRequest) (*SessionResponse, error)
	GetSession(context.Context, *SessionRequest) (*SessionResponse, error)
	GetSessionUserName(context.Context, *SessionRequest) (*SessionUserName, error)
	GetSessionService(context.Context, *SessionRequest) (*SessionResponse, error)
	GetSessionUserRoleID(context.Context, *SessionRequest) (*SessionUsersRoleID, error)
}

// UnimplementedSessionServer can be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (*UnimplementedSessionServer) CreateSession(ctx context.Context, req *SessionCreateRequest) (*SessionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedSessionServer) DeleteSession(ctx context.Context, req *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (*UnimplementedSessionServer) GetAllActiveSessions(ctx context.Context, req *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllActiveSessions not implemented")
}
func (*UnimplementedSessionServer) GetSession(ctx context.Context, req *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (*UnimplementedSessionServer) GetSessionUserName(ctx context.Context, req *SessionRequest) (*SessionUserName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionUserName not implemented")
}
func (*UnimplementedSessionServer) GetSessionService(ctx context.Context, req *SessionRequest) (*SessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionService not implemented")
}
func (*UnimplementedSessionServer) GetSessionUserRoleID(ctx context.Context, req *SessionRequest) (*SessionUsersRoleID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionUserRoleID not implemented")
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).CreateSession(ctx, req.(*SessionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/DeleteSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).DeleteSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetAllActiveSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetAllActiveSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/GetAllActiveSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetAllActiveSessions(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetSessionUserName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetSessionUserName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/GetSessionUserName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetSessionUserName(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetSessionService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetSessionService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/GetSessionService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetSessionService(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_GetSessionUserRoleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetSessionUserRoleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Session/GetSessionUserRoleID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetSessionUserRoleID(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _Session_CreateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Session_DeleteSession_Handler,
		},
		{
			MethodName: "GetAllActiveSessions",
			Handler:    _Session_GetAllActiveSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _Session_GetSession_Handler,
		},
		{
			MethodName: "GetSessionUserName",
			Handler:    _Session_GetSessionUserName_Handler,
		},
		{
			MethodName: "GetSessionService",
			Handler:    _Session_GetSessionService_Handler,
		},
		{
			MethodName: "GetSessionUserRoleID",
			Handler:    _Session_GetSessionUserRoleID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session/session.proto",
}
